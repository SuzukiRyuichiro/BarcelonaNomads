@model BarcelonaNomads.Models.Location

@{
    ViewData["Title"] = "Edit " + Model.Name;
    string Address = Model.Address;
}
<div class="row justify-content-center">
    <div class="col-md-4">
        <h1>Edit</h1>
        <hr />
        <div id="locationImageWrapper" class=" w-100 ratio d-none ratio-16x9 rounded-2 overflow-hidden mb-2">
            <img id="locationImage" src="" alt="Picture of the location" />
        </div>
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group form-floating mb-3">
                <input asp-for="Name" type="text" class="form-control" id="floatingName" placeholder="Hello World Cafe">
                <label asp-for="Name" for="floatingName">Name</label>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group form-floating mb-3">
                <input asp-for="Address" type="text" class="form-control" id="floatingAddress" placeholder="Barcelona">
                <label asp-for="Address" for="floatingAddress">Address</label>
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <div class="form-group form-floating mb-3">
                <textarea asp-for="Description" type="text" class="form-control" id="floatingDescription"
                    placeholder="Barcelona" style="height: 4rem;"></textarea>
                <label asp-for="Description" for="floatingDescription">Description</label>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group form-floating mb-3">

                <input asp-for="ImageURL" type="text" class="form-control" id="floatingImageURL"
                    placeholder="Barcelona">
                <label asp-for="ImageURL" for="floatingImageURL">Image URL</label>
                <span asp-validation-for="ImageURL" class="text-danger"></span>
            </div>

            <div id='map' class=" rounded-2" style='width: 100%; height: 300px;'></div>

            <div class="row mt-3">
                <div class="col">
                    <div class="form-group form-floating mb-3">
                        <input asp-for="Longitude" type="text" class="form-control" id="floatingLongitude"
                            placeholder="Barcelona">
                        <label asp-for="Longitude" for="floatingLongitude">Longitude</label>
                        <span asp-validation-for="Longitude" class="text-danger"></span>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group form-floating mb-3">
                        <input asp-for="Latitude" type="text" class="form-control" id="floatingLatitude"
                            placeholder="Barcelona">
                        <label asp-for="Latitude" for="floatingLatitude">Latitude</label>
                        <span asp-validation-for="Latitude" class="text-danger"></span>
                    </div>

                </div>
            </div>


            <div class="d-flex justify-content-between">
                <a asp-action="Index" class="btn btn-success">Back to List</a>

                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>
    const imageURLField = document.getElementById("floatingImageURL");

    $(document).ready(() => {
        if (imageURLField.value) {
            const locationImage = document.getElementById("locationImage");
            const locationImageWrapper = document.getElementById("locationImageWrapper");
            locationImage.src = imageURLField.value;
            locationImageWrapper.classList.remove("d-none");
        }
    });

    imageURLField.addEventListener('change', () => {
        const locationImage = document.getElementById("locationImage");
        const locationImageWrapper = document.getElementById("locationImageWrapper");
        const url = imageURLField.value;

        const regex = new RegExp("https?://.+");
        if (regex.test(url)) {
            locationImage.src = url;
            locationImageWrapper.classList.remove("d-none");
        } else {
            locationImage.src = "";
            locationImageWrapper.classList.add("d-none");
        }
    });

    // Map stuff

    mapboxgl.accessToken = 'pk.eyJ1Ijoic2Nvb3Rlci1zY29vdGVyIiwiYSI6ImNra3J2Z2ozZTBmNDczMXA2MzVvdXdrOHkifQ.RiTFrooZyY_30oinadpaxw';

    const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/streets-v11', // style URL
        center: [2.1686, 41.3874], // starting position [lng, lat]
        zoom: 9, // starting zoom
        projection: 'globe' // display the map as a 3D globe
    });

    map.on('style.load', () => {
        map.setFog({}); // Set the default atmosphere style
    });

    map.addControl(new mapboxgl.NavigationControl());

    // add geolocation controll
    map.addControl(new mapboxgl.GeolocateControl({
        positionOptions: {
            enableHighAccuracy: true
        },
        trackUserLocation: true,
        showUserHeading: true
    }));

    // get long and lat
    const addressField = document.getElementById("floatingAddress");
    const longitudeField = document.getElementById("floatingLongitude");
    const latitudeField = document.getElementById("floatingLatitude");

    const longitude = longitudeField.value;
    const latitude = latitudeField.value;

    const getLngLat = async () => {
        const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${addressField.value}.json?country=es&bbox=1.859424,41.141336,2.634753,41.574265&access_token=${mapboxgl.accessToken}`
        const res = await fetch(url);
        const data = await res.json();
        const [longitude, latitude] = data.features[0].center;

        longitudeField.value = longitude;
        latitudeField.value = latitude;

        map.flyTo({
            zoom: 16,
            center: [longitude, latitude],
            essential: true // this animation is considered essential with respect to prefers-reduced-motion
        });

        // Create a new marker.
        const marker = new mapboxgl.Marker()
            .setLngLat([longitude, latitude])
            .addTo(map);
    }

    if (!longitude || !latitude) {
        getLngLat();
    } else {
        map.flyTo({
            zoom: 16,
            center: [longitude, latitude],
            essential: true // this animation is considered essential with respect to prefers-reduced-motion
        });

        // Create a new marker.
        const marker = new mapboxgl.Marker()
            .setLngLat([longitude, latitude])
            .addTo(map);
    }

</script>
}
