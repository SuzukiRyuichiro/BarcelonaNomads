@model IEnumerable<BarcelonaNomads.Models.Location>

@{
    ViewData["Title"] = "All locations";
}
<div class="row">
    <div class="col overflow-hidden">
        <div id='map' class=" rounded-2" style='width: 100%; height: 300px;'></div>
    </div>
</div>
@* Filter buttons *@
<div class="row mt-3">
    <div class="col d-flex">
        <div>
            <input type="checkbox" class="btn-check" id="cafe" autocomplete="off">
            <label class="btn btn-outline-success" for="cafe">‚òïÔ∏è Cafe</label>
        </div>
        <div class="ms-2">
            <input type="checkbox" class="btn-check" id="coworking-space" autocomplete="off">
            <label class="btn btn-outline-success" for="coworking-space">üë©‚Äçüíª Coworking Space</label>
        </div>
        <div class="ms-2">
            <input type="checkbox" class="btn-check" id="library" autocomplete="off">
            <label class="btn btn-outline-success" for="library">üìö Library</label>
        </div>
    </div>
</div>
@* Location cards *@
<div class="row g-2 mt-3">
    @foreach (var item in Model)
    {
        @await Html.PartialAsync("./Components/_Card.cshtml", item)
        ;
    }
</div>

@section Scripts {
@{
await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic2Nvb3Rlci1zY29vdGVyIiwiYSI6ImNra3J2Z2ozZTBmNDczMXA2MzVvdXdrOHkifQ.RiTFrooZyY_30oinadpaxw';
    const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/streets-v11', // style URL
        center: [2.1686, 41.3874], // starting position [lng, lat]
        zoom: 11, // starting zoom
    });

    map.on('style.load', () => {
        map.setFog({}); // Set the default atmosphere style
    });
    // Add zoom and rotation controls to the map.
    map.addControl(new mapboxgl.NavigationControl());

    // add geolocation controll
    map.addControl(new mapboxgl.GeolocateControl({
        positionOptions: {
            enableHighAccuracy: true
        },
        trackUserLocation: true,
        showUserHeading: true
    }));

    const locationTypes = {
        "cafe": "‚òïÔ∏è",
        "library": "üìö",
        "coworking space": "üë©‚Äçüíª"
    }

    // add markers
    const cards = document.querySelectorAll('[data-target="location-card"]');
    cards.forEach(card => {
        const { locationType, imageUrl, name, address } = card.dataset;
        const emoji = locationTypes[locationType.toLowerCase()];
        const marker = new mapboxgl.Marker()
            .setLngLat([card.dataset.lng, card.dataset.lat])
            .setPopup(
                new mapboxgl.Popup({ offset: 10 }) // add popups
                    .setHTML(
                        `
                        <div class="row">
                            <div class="col-5">
                            <div class="overflow-hidden rounded-2 ratio ratio-4x3">
                                <img src="${imageUrl}" class="object-fit-cover" alt="${name}">
                            </div>
                            </div>
                            <div class="col-7">
                                <p>wifi speed: 345Mbps</p>
                            </div>
                            <div class="col-12 mt-2">
                                <h6>${emoji} ${name}</h6>
                                <span><i class="bi bi-pin-map"></i> ${address}</span>
                            </div>
                        </div>
                        `
                    )
            )
            .addTo(map);
    });
</script>
}
